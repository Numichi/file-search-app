plugins {
    id 'java'
    id 'jacoco' // For code coverage
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.15.0' // For OpenAPI code generation
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'demo10'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}

repositories {
    mavenCentral()
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.81' // For Argon2
    implementation 'org.passay:passay:1.6.6' // For password policy

    // Database Migration
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'org.postgresql:postgresql'

    // UUID generation tool (contains UUIDv7)
    implementation 'com.github.f4b6a3:uuid-creator:6.1.1'

    // OpenAPI and Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.12'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.13.0'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.13.0'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.13.0'

    // Logging
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'com.lmax:disruptor:4.0.0' // For Async logging with Log4j2

    // Micrometer and Prometheus
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel' // Micrometer Tracing with OpenTelemetry
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp' // OTLP exporter
    runtimeOnly 'io.micrometer:micrometer-registry-otlp'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // MapStruct and Lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor "org.projectlombok:lombok:1.18.34"
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    // Lombok for tests
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor "org.projectlombok:lombok:1.18.34"

    // Tests - core and security
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // For testing core
    testImplementation 'org.springframework.security:spring-security-test' // For testing security
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // Test - REST Assured tools
    testImplementation 'io.rest-assured:rest-assured:5.5.6' // For testing REST APIs
    testImplementation 'io.rest-assured:spring-mock-mvc:5.5.6' // For testing Spring MVC controllers
    // Test - Testcontainers for integration tests
    testImplementation 'org.springframework.boot:spring-boot-testcontainers' // Testcontainers integration base
    testImplementation 'org.testcontainers:junit-jupiter' // JUnit 5 Testcontainers support
    testImplementation 'org.testcontainers:postgresql' // PostgreSQL Testcontainer
    // Test - other tools
    testImplementation 'net.datafaker:datafaker:2.4.4' // For generating fake data
    testImplementation 'org.instancio:instancio-junit:5.5.1' // For generating random test data


}

tasks.named('compileJava') {
    dependsOn tasks.named('openApiGenerate')
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

//=============================================================================
// Jacoco & Test coverage
//=============================================================================

tasks.jacocoTestReport {
    dependsOn test

    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

//=============================================================================
// OpenAPI Generator
//=============================================================================

openApiGenerate {
    generatorName = "spring"
    inputSpec = "${rootProject.rootDir}/src/main/resources/openapi/server.yaml"
    outputDir = layout.buildDirectory.dir("generated").get().asFile.absolutePath
    apiPackage = "com.example.api"
    invokerPackage = "com.example.invoker"
    modelPackage = "com.example.model"
    configOptions = [
            "useTags"             : "true",
            "generateBuilders"    : "true",
            "interfaceOnly"       : "true",
            "skipDefaultInterface": "true",
            "booleanGetterPrefix" : "is",
            "useSpringBoot3"      : "true",
            "typeMappings"        : "OffsetDateTime=Instant",
            "importMappings"      : "java.time.OffsetDateTime=java.time.Instant"
    ]
    typeMappings = [
            "OffsetDateTime": "Instant"
    ]
    importMappings = [
            "java.time.OffsetDateTime": "java.time.Instant"
    ]
}